{"version":3,"file":"static/js/928.7541709b.chunk.js","mappings":"olwBA4BA,EA1BmB,WAAe,IAAdA,EAAGC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAGxB,OAFAG,QAAQC,IAAI,kBAEL,IAAIC,QAAQ,CAACC,EAASC,KAC3B,IAAIC,EAAQC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAkB,GAE1CH,EAAQ,KACVI,WAAW,KACT,GAAY,WAARb,EACFO,EAAQO,EAAAA,OACH,CACL,IAAIC,EAAQf,EAAIgB,YAAY,KACxBC,EAASC,OAAOlB,EAAImB,UAAUJ,EAAQ,IAE1C,MAAMK,EAAcN,EAAAA,EAAWO,KAAKC,IAAA,IAAC,GAAEC,GAAID,EAAA,OAAKC,IAAON,IACvDV,EAAQa,EACV,GACCX,GAEHI,WAAW,KACTL,EAAO,IAAIgB,MAAM,2BAChBf,IAGT,EC0BA,QAjDA,SAAkBgB,GAChB,MAAOX,EAAMY,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,MAC7BK,GAASC,EAAAA,EAAAA,SAAO,GAChBC,GAAqBD,EAAAA,EAAAA,QAAO,MAE5BE,GAAYC,EAAAA,EAAAA,aAAY,KAC5B,IAAKX,EAAK,OAEVO,EAAOK,SAAU,EAEbH,EAAmBG,SACrBH,EAAmBG,QAAQC,QAE7B,MAAMC,EAAa,IAAIC,gBACvBN,EAAmBG,QAAUE,EAE7BV,GAAW,GACXE,EAAS,MAETU,EAAWhB,EAAK,CAAEiB,OAAQH,EAAWG,SAClCC,KAAMC,IACAZ,EAAOK,SAASX,EAAQkB,KAE9BC,MAAOf,IACDE,EAAOK,UACVN,EAASD,GACT1B,QAAQ0B,MAAMA,MAGjBgB,QAAQ,KACFd,EAAOK,SAASR,GAAW,MAEnC,CAACJ,IAYJ,OAVAsB,EAAAA,EAAAA,WAAU,KACRZ,IACO,KACLH,EAAOK,SAAU,EACbH,EAAmBG,SACrBH,EAAmBG,QAAQC,UAG9B,CAACH,IAEG,CAAErB,OAAMc,UAASE,QAAOkB,QAASb,EAC1C,C,sDC5BA,QAnBA,SAAkBb,GAAwC,IAAvC,IAACtB,EAAG,IAAEiD,EAAG,UAAEC,KAAcC,GAAW7B,EACrD,MAAO8B,EAAaC,IAAkB1B,EAAAA,EAAAA,WAAS,GAE/C,OACE2B,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAAA,OACEtD,IAAKA,EACLiD,IAAKA,KACDE,EACJD,UAAW,GAAGA,cAAsBE,EAAc,SAAW,KAC7DK,OAAQA,KAENJ,GAAe,OAK3B,C","sources":["services/fetchBooks.js","hooks/useFetch.js","components/LazyImage/LazyImage.jsx"],"sourcesContent":["import data from \"../data/books.json\";\r\n\r\nconst fetchBooks = (src = \"\") => {\r\n  console.log(\"Fetching books\");\r\n\r\n  return new Promise((resolve, reject) => {\r\n    let delay = Math.floor(Math.random() * 2000 + 1);\r\n\r\n    if (delay < 1900) {\r\n      setTimeout(() => {\r\n        if (src === \"/books\") {\r\n          resolve(data.books);\r\n        } else {\r\n          let index = src.lastIndexOf(\"/\");\r\n          let bookID = Number(src.substring(index + 1));\r\n\r\n          const currentBook = data.books.find(({ id }) => id === bookID);\r\n          resolve(currentBook);\r\n        }\r\n      }, delay);\r\n    } else {\r\n      setTimeout(() => {\r\n        reject(new Error(\"Failed to fetch books\"));\r\n      }, delay);\r\n    }\r\n  });\r\n};\r\n\r\nexport default fetchBooks;\r\n","import { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport fetchBooks from \"../services/fetchBooks\";\r\n\r\nfunction useFetch(url) {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const ignore = useRef(false);\r\n  const abortControllerRef = useRef(null);\r\n\r\n  const fetchData = useCallback(() => {\r\n    if (!url) return;\r\n\r\n    ignore.current = false;\r\n\r\n    if (abortControllerRef.current) {\r\n      abortControllerRef.current.abort();\r\n    }\r\n    const controller = new AbortController();\r\n    abortControllerRef.current = controller;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    fetchBooks(url, { signal: controller.signal })\r\n      .then((response) => {\r\n        if (!ignore.current) setData(response);\r\n      })\r\n      .catch((error) => {\r\n        if (!ignore.current) {\r\n          setError(error);\r\n          console.error(error);\r\n        }\r\n      })\r\n      .finally(() => {\r\n        if (!ignore.current) setLoading(false);\r\n      });\r\n  }, [url]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    return () => {\r\n      ignore.current = true; // щоб уникнути setState на розмонтованому компоненті\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n    };\r\n  }, [fetchData]);\r\n\r\n  return { data, loading, error, refetch: fetchData };\r\n}\r\n\r\nexport default useFetch;\r\n","import { useState } from \"react\";\r\nimport \"./LazyImage.css\";\r\n\r\nfunction LazyImage({src, alt, className, ...otherProps}) {\r\n  const [isImgLoaded, setIsImgLoaded] = useState(false);\r\n  // console.log(\"Img render\");\r\n  return (\r\n    <>  \r\n        <img\r\n          src={src}\r\n          alt={alt}\r\n          {...otherProps}\r\n          className={`${className} lazy-img ${isImgLoaded ? \"loaded\" : \"\"}`}\r\n          onLoad={() => {\r\n            // console.log(\"Img loaded\");\r\n            setIsImgLoaded(true);\r\n          }}\r\n        />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LazyImage;"],"names":["src","arguments","length","undefined","console","log","Promise","resolve","reject","delay","Math","floor","random","setTimeout","data","index","lastIndexOf","bookID","Number","substring","currentBook","find","_ref","id","Error","url","setData","useState","loading","setLoading","error","setError","ignore","useRef","abortControllerRef","fetchData","useCallback","current","abort","controller","AbortController","fetchBooks","signal","then","response","catch","finally","useEffect","refetch","alt","className","otherProps","isImgLoaded","setIsImgLoaded","_jsx","_Fragment","children","onLoad"],"sourceRoot":""}